{
  "Do-While Statement": {
    "prefix": "dowhile",
    "body": [
      "do {",
      "\t$0",
      "} while (${1:condition});"
    ],
    "description": "Do-While Statement"
  },
  "Private field": {
    "prefix": "private_field",
    "body": [
      "private ${1:String} ${2:name};"
    ],
    "description": "Private field"
  },
  "Private static method": {
    "prefix": "private_static_method",
    "body": [
      "private static ${1:Type} ${2:name}(${3}) {",
      "\t$0",
      "}"
    ],
    "description": "private static method"
  },
  "Protected Method": {
    "prefix": "protected_method",
    "body": [
      "protected ${1:void} ${2:name}(${3}) {",
      "\t$0",
      "}"
    ],
    "description": "Protected method"
  },
  "Protected field": {
    "prefix": "protected_field",
    "body": [
      "protected ${1:String} ${2:name};"
    ],
    "description": "Protected field"
  },
  "Public constructor": {
    "prefix": "ctor",
    "body": [
      "public ${1:${TM_FILENAME_BASE}}($2) {",
      "\t${0:super();}",
      "}"
    ],
    "description": "Public constructor"
  },
  "Public field": {
    "prefix": "public_field",
    "body": [
      "public ${1:String} ${2:name};"
    ],
    "description": "Public field"
  },
  "Public method": {
    "prefix": "public_method",
    "body": [
      "public ${1:void} ${2:name}(${3}) {",
      "\t$0",
      "}"
    ],
    "description": "public method"
  },
  "Public static method": {
    "prefix": "public_static_method",
    "body": [
      "public static ${1:void} ${2:name}(${3}) {",
      "\t$0",
      "}"
    ],
    "description": "public static method"
  },
  "Switch Statement": {
    "prefix": "switch",
    "body": [
      "switch (${1:key}) {",
      "\tcase ${2:value}:",
      "\t\t$0",
      "\t\tbreak;",
      "",
      "\tdefault:",
      "\t\tbreak;",
      "}"
    ],
    "description": "Switch Statement"
  },
  "While Statement": {
    "prefix": "while",
    "body": [
      "while (${1:condition}) {",
      "\t$0",
      "}"
    ],
    "description": "While Statement"
  },
  "class": {
    "prefix": "class",
    "body": [
      "public class ${TM_FILENAME_BASE} {",
      "\t$0",
      "}"
    ],
    "description": "Public class"
  },
  "foreach": {
    "prefix": "foreach",
    "body": [
      "for (${1:type} ${2:var} : ${3:iterable}) {",
      "\t$0",
      "}"
    ],
    "description": "Enhanced for loop"
  },
  "fori": {
    "prefix": "fori",
    "body": [
      "for (${1:int} ${2:i} = ${3:0}; $2 < ${4:max}; $2++) {",
      "\t$0",
      "}"
    ],
    "description": "Indexed for loop"
  },
  "if": {
    "prefix": "if",
    "body": [
      "if (${1:condition}) {",
      "\t$0",
      "}"
    ],
    "description": "if statement"
  },
  "ifelse": {
    "prefix": "ifelse",
    "body": [
      "if (${1:condition}) {",
      "\t$2",
      "} else {",
      "\t$0",
      "}"
    ],
    "description": "if/else statement"
  },
  "ifnotnull": {
    "prefix": "ifnotnull",
    "body": [
      "if (${1:condition} != null) {",
      "\t$0",
      "}"
    ],
    "description": "if statement checking for not null"
  },
  "ifnull": {
    "prefix": "ifnull",
    "body": [
      "if (${1:condition} == null) {",
      "\t$0",
      "}"
    ],
    "description": "if statement checking for null"
  },
  "import": {
    "prefix": "import",
    "body": [
      "import ${1:PackageName}"
    ],
    "description": "Import statement"
  },
  "main": {
    "prefix": "main",
    "body": [
      "public static void main(String[] args) {",
      "\t$0",
      "}"
    ],
    "description": "Public static main method"
  },
  "newObject": {
    "prefix": "new",
    "body": [
      "${1:Object} ${2:foo} = new ${1:Object}();"
    ],
    "description": "Create new Object"
  },
  "package": {
    "prefix": "package",
    "body": [
      "package ${1:PackageName}"
    ],
    "description": "Package statement"
  },
  "private_method": {
    "prefix": "private_method",
    "body": [
      "private ${1:void} ${2:name}($3) {",
      "\t$0",
      "}"
    ],
    "description": "private method"
  },
  "syserr": {
    "prefix": "syserr",
    "body": [
      "System.err.println($0);"
    ],
    "description": "Print to standard err"
  },
  "sysout": {
    "prefix": "sysout",
    "body": [
      "System.out.println($0);"
    ],
    "description": "Print to standard out"
  },
  "trycatch": {
    "prefix": "try_catch",
    "body": [
      "try {",
      "\t$1",
      "} catch (${2:Exception} ${3:e}) {",
      "\t$4//${0:TODO}: handle exception",
      "}"
    ],
    "description": "try/catch block"
  },
  "tryresources": {
    "prefix": "try_resources",
    "body": [
      "try ($1) {",
      "\t$2",
      "} catch (${3:Exception} ${4:e}) {",
      "\t$5//${0:TODO}: handle exception",
      "}"
    ],
    "description": null
  }
}