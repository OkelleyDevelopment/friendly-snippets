{
  "@@warning": {
    "prefix": "[\"@w\"]",
    "body": [
      "\"@@warning(\\\"${1:-27}\\\")\""
    ],
    "description": "null"
  },
  "@genType": {
    "prefix": "[\"gt\"]",
    "body": [
      "\"@genType\""
    ],
    "description": "null"
  },
  "@genType alias": {
    "prefix": "[\"gta\"]",
    "body": [
      "\"@genType.as(\\\"${1:CB}\\\")\""
    ],
    "description": "null"
  },
  "@genType import": {
    "prefix": "[\"gti\"]",
    "body": [
      "\"@genType.import(\\\"${1:./MyMath}\\\")\""
    ],
    "description": "null"
  },
  "Array destructuring": {
    "prefix": "[\"dar\"]",
    "body": [
      "\"let [${1:a}] = ${2:data}\""
    ],
    "description": "null"
  },
  "Belt. fromString": {
    "prefix": "[\"bfs\",\"bfstr\"]",
    "body": [
      "\"Belt.Int.fromString(${1:10})\""
    ],
    "description": "null"
  },
  "Belt. toString": {
    "prefix": "[\"bts\",\"btstr\"]",
    "body": [
      "\"Belt.Int.toString(${1:10})\""
    ],
    "description": "null"
  },
  "For Loop": {
    "prefix": "[\"for\"]",
    "body": [
      "\"for ${1:i} in ${2:startValueInclusive} to ${3:endValueInclusive} {\"",
      "\"\\t${4:Js.log(${1:i})}\"",
      "\"}\""
    ],
    "description": "null"
  },
  "Global External Module": {
    "prefix": "[\"@bs\",\"external\"]",
    "body": [
      "\"@scope(\\\"${1:Math}\\\") @val external ${2:random}: ${3:unit => float} = \\\"${4:random}\\\"\""
    ],
    "description": "null"
  },
  "Global External Object": {
    "prefix": "[\"@bs\",\"external\"]",
    "body": [
      "\"@val external ${1:setTimeout}: ${2:(unit => unit, int) => float} = \\\"${3:setTimeout}\\\"\""
    ],
    "description": "null"
  },
  "JS Module Default External": {
    "prefix": "[\"@bs\",\"external\"]",
    "body": [
      "\"@module external ${1:leftPad}: ${2:(string, int) => string} = \\\"${3:leftPad}\\\"\""
    ],
    "description": "null"
  },
  "JS Module External": {
    "prefix": "[\"@bs\",\"external\"]",
    "body": [
      "\"@module(\\\"${1:path}\\\") external ${2:dirname}: ${3:string => string} = \\\"${4:dirname}\\\"\""
    ],
    "description": "null"
  },
  "Module": {
    "prefix": "[\"module\"]",
    "body": [
      "\"module ${1:Name} = {\"",
      "\"\\t${2:// Module contents}\"",
      "\"}\""
    ],
    "description": "null"
  },
  "Object destructuring": {
    "prefix": "[\"dob\"]",
    "body": [
      "\"let {${1:a}} = ${2:data}\""
    ],
    "description": "null"
  },
  "Raise exception": {
    "prefix": "[\"rs\",\"raise\"]",
    "body": [
      "\"raise(${1:SomeError}(${2:// write your text}))\""
    ],
    "description": "null"
  },
  "React Component": {
    "prefix": "[\"react.component\",\"@react\"]",
    "body": [
      "\"@react.component\"",
      "\"let make = (${1}) => {\"",
      "\"\\t${2}\"",
      "\"}\""
    ],
    "description": "null"
  },
  "Reverse For Loop": {
    "prefix": "[\"for\"]",
    "body": [
      "\"for ${1:i} in ${2:startValueInclusive} downto ${3:endValueInclusive} {\"",
      "\"\\t${4:Js.log(${1:i})}\"",
      "\"}\""
    ],
    "description": "null"
  },
  "Switch": {
    "prefix": "[\"switch\"]",
    "body": [
      "\"switch ${1:value} {\"",
      "\"| ${2:pattern1} => ${3:expression}\"",
      "\"${4:| ${5:pattern2} => ${6:expression}}\"",
      "\"}\""
    ],
    "description": "null"
  },
  "Ternary operator": {
    "prefix": "[\"to\"]",
    "body": [
      "\"${1:a} ? ${2:b} : ${3:c}\""
    ],
    "description": "null"
  },
  "Top level js embed": {
    "prefix": "[\"tle\",\"tlr\"]",
    "body": [
      "\"%%raw(`\"",
      "\"\\t${1://js code}\"",
      "\"`)\""
    ],
    "description": "null"
  },
  "Try": {
    "prefix": "[\"try\"]",
    "body": [
      "\"try {\"",
      "\"\\t${1:expression}\"",
      "\"} catch {\"",
      "\"| ${2:MyException} => ${3:expression}\"",
      "\"}\""
    ],
    "description": "null"
  },
  "alias": {
    "prefix": "[\"@a\"]",
    "body": [
      "\"@as(\\\"${1:aria-label}\\\")\""
    ],
    "description": "null"
  },
  "compiler deprecation warn": {
    "prefix": "[\"@dw\"]",
    "body": [
      "\"@deprecated(\\\"${1:This field deprecated}. Use ${2:something} instead\\\")\""
    ],
    "description": "null"
  },
  "console.error": {
    "prefix": "[\"ce\",\"cer\"]",
    "body": [
      "\"Js.error(${1:something})\""
    ],
    "description": "null"
  },
  "console.info": {
    "prefix": "[\"ci\",\"coi\"]",
    "body": [
      "\"Js.info(${1:something})\""
    ],
    "description": "null"
  },
  "console.log": {
    "prefix": "[\"cl\",\"col\"]",
    "body": [
      "\"Js.log(${1:something})\""
    ],
    "description": "null"
  },
  "console.timeEnd": {
    "prefix": "[\"cte\"]",
    "body": [
      "\"Js.timeEnd(${1:something})\""
    ],
    "description": "null"
  },
  "console.timeStart": {
    "prefix": "[\"cts\"]",
    "body": [
      "\"Js.timeStart(${1:something})\""
    ],
    "description": "null"
  },
  "console.trace": {
    "prefix": "[\"ct\",\"ctr\"]",
    "body": [
      "\"Js.trace(${1:something})\""
    ],
    "description": "null"
  },
  "console.warn": {
    "prefix": "[\"cw\",\"cow\"]",
    "body": [
      "\"Js.warn(${1:something})\""
    ],
    "description": "null"
  },
  "expression level js embed": {
    "prefix": "[\"ele\",\"exe\",\"elr\"]",
    "body": [
      "\"%raw(\\\"${1://js expression}\\\")\""
    ],
    "description": "null"
  },
  "function": {
    "prefix": "[\"function\"]",
    "body": [
      "\"let ${1:doSomeStuff} = (${2}) => {\"",
      "\"\\t${0}\"",
      "\"}\""
    ],
    "description": "null"
  },
  "if inline": {
    "prefix": "[\"ifi\"]",
    "body": [
      "\"if ${1:a} {${2:b}} else {${3:c}}\""
    ],
    "description": "null"
  },
  "inline functin": {
    "prefix": "[\"fn\"]",
    "body": [
      "\"let ${1:name} = (${2}) => ${0}\""
    ],
    "description": "null"
  },
  "js debugger": {
    "prefix": "[\"dbg\"]",
    "body": [
      "\"%%debugger\""
    ],
    "description": "null"
  },
  "mutable variable": {
    "prefix": "[\"lm\",\"letm\",\"mvar\"]",
    "body": [
      "\"let ${1:x} = ref(${2:\\\"hello\\\"})\""
    ],
    "description": "null"
  },
  "pipe functions": {
    "prefix": "[\"fnpp\",\"funcpp\",\"pipe\"]",
    "body": [
      "\"${1:firstFunction}\"",
      "\"\\t->${2:secondFunction}\""
    ],
    "description": "null"
  },
  "type": {
    "prefix": "[\"t\",\"tp\",\"type\"]",
    "body": [
      "\"type ${1:x} = ${2:int}\""
    ],
    "description": "null"
  },
  "type polimorphic variant": {
    "prefix": "[\"tpv\",\"typepv\"]",
    "body": [
      "\"type ${1:x} = [ #${2:one} | #${3:two} ]\""
    ],
    "description": "null"
  },
  "type with generic": {
    "prefix": "[\"tpg\",\"typeg\"]",
    "body": [
      "\"type ${1:x}<'${2:a}> = ${3:int}\""
    ],
    "description": "null"
  },
  "variable": {
    "prefix": "[\"l\",\"let\",\"var\"]",
    "body": [
      "\"let ${1:x} = ${2:\\\"hello\\\"}\""
    ],
    "description": "null"
  }
}